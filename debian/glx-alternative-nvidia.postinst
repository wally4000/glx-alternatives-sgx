#!/bin/sh
set -e


TRIPLETS="/ /i386-linux-gnu/ /x86_64-linux-gnu/ /arm-linux-gnueabihf/ /aarch64-linux-gnu/ /powerpc64le-linux-gnu/"

is_installed()
{
	local pkg="$1"
	dpkg-query -s "$pkg" >/dev/null 2>&1 || return 1
	local status="$(dpkg-query -W -f '${Status}' $pkg)"
	if [ "$status" = "install ok installed" ]; then
		return 0
	fi
	return 1
}

add_slave()
{
	local target_link name source_path prefix
	target_link="$1"
	name="$2"
	source_path="$3"
	prefix="glx--"

	if [ -f "${source_path}" ] && [ -d "$(dirname "${target_link}")" ]; then
		echo --slave "${target_link}" "${prefix}${name}" "${source_path}"
	fi
}

add_multiarch_slave()
{
	local target_dir target_sub_dir file source_dir source_sub_dir prefix suffix triplet
	target_dir="$1"
	target_sub_dir="$2"
	file="$3"
	source_dir="$4"
	source_sub_dir="$5"
	prefix="$6"
	srcfile="${7:-$file}"

	for triplet in $TRIPLETS ; do
		# s|/$||; s|^/|-|;
		suffix="${triplet%/}"
		suffix="${suffix:+-${suffix#/}}"
		add_slave \
			"${target_dir}${triplet}${target_sub_dir}${file}" \
			"${prefix}${file}${suffix}" \
			"${source_dir}${triplet}${source_sub_dir}${srcfile}"
	done
}

# try to find $library in $vendor, mesa-diverted
search_multiarch_slave()
{
	local library vendor s
	library="$1"
	vendor="$2"

      if [ -n "$vendor" ]; then
	s="$(add_multiarch_slave /usr/lib "" $library /usr/lib $vendor/)"
	if echo "$s" | grep -q "slave" ; then
		echo "$s"
		return
	fi
      fi
	s="$(add_multiarch_slave /usr/lib "" $library /usr/lib/mesa-diverted)"
	echo "$s"
}

# Handles the alternatives for
# * /usr/lib[/<triplet>]/libGL.so.1
# * /usr/lib/xorg/modules/linux/libglx.so
# * /usr/lib/xorg/modules/drivers/nvidia_drv.so
# * several more NVIDIA libraries etc.
# * /etc/modprobe.d/nvidia-blacklists-nouveau.conf
# * /etc/modprobe.d/nvidia.conf
# * /etc/modules-load.d/nvidia.conf
# * /usr/share/X11/xorg.conf.d/nvidia-drm-outputclass.conf
setup_alternatives()
{
	libGL_nvidia_enabler="
		$(add_multiarch_slave /usr/lib "" libGL.so.1 /usr/lib nvidia/)
		$(add_multiarch_slave /usr/lib "" libGLX_nvidia.so.0 /usr/lib "")
"
	xorg_enabler="
		$(add_slave /usr/lib/xorg/modules/drivers/nvidia_drv.so nvidia_drv.so /usr/lib/nvidia/nvidia_drv.so)
"
	cuda_enabler="
		$(add_multiarch_slave /usr/lib "" libcuda.so /usr/lib)
"
	libGL_nvidia_slaves="
		$(search_multiarch_slave libGL.so.1 nvidia)
		$(add_multiarch_slave /usr/lib "" libXvMCNVIDIA.so.1 /usr/lib nvidia/)
		$(add_multiarch_slave /usr/lib "" libXvMCNVIDIA_dynamic.so.1 /usr/lib nvidia/)
		$(add_multiarch_slave /usr/lib "" libGLX_indirect.so.0 /usr/lib "" "" libGLX_nvidia.so.0)
"
	libEGL_nvidia_slaves="
		$(search_multiarch_slave libEGL.so.1 nvidia)
		$(search_multiarch_slave libGLESv1_CM.so.1 nvidia)
		$(search_multiarch_slave libGLESv2.so.2 nvidia)
"
	libGL_mesa_slaves="
		$(search_multiarch_slave libGL.so.1)
		$(add_multiarch_slave /usr/lib "" libGLX_indirect.so.0 /usr/lib "" "" libGLX_mesa.so.0)
"
	libEGL_mesa_slaves="
		$(search_multiarch_slave libEGL.so.1)
		$(search_multiarch_slave libGLESv1_CM.so.1)
		$(search_multiarch_slave libGLESv2.so.2)
"
	xorg_slaves="
		$xorg_enabler
		$(add_slave /usr/lib/xorg/modules/linux/libglx.so linux-libglx.so /usr/lib/nvidia/libglx.so)
		$(add_slave /usr/lib/xorg/modules/extensions/libglxserver_nvidia.so libglxserver_nvidia.so /usr/lib/nvidia/libglxserver_nvidia.so)
"
	xorg_conf_slaves=""
	if echo "$xorg_enabler" | grep -q "slave" ; then
		xorg_conf_slaves="
		$(add_slave /usr/share/X11/xorg.conf.d/nvidia-drm-outputclass.conf nvidia-drm-outputclass.conf /etc/nvidia/nvidia-drm-outputclass.conf)
"
	fi
	kernel_manual_slaves="
		$(add_slave /etc/modprobe.d/nvidia-blacklists-nouveau.conf nvidia-blacklists-nouveau.conf /etc/nvidia/nvidia-blacklists-nouveau.conf)
		$(add_slave /etc/modprobe.d/nvidia.conf nvidia-modprobe.conf /etc/nvidia/nvidia-modprobe.conf)
"
	kernel_auto_slaves="
		$kernel_manual_slaves
		$(add_slave /etc/modules-load.d/nvidia.conf nvidia-load.conf /etc/nvidia/nvidia-load.conf)
"
	misc_slaves="
		$(add_multiarch_slave /usr/lib "" libnvidia-cfg.so.1 /usr/lib nvidia/)
		$(add_slave /usr/bin/nvidia-bug-report.sh nvidia-bug-report.sh /usr/lib/nvidia/nvidia-bug-report.sh)
"

	prio=100
	prio_bumblebee=95

	if is_installed bumblebee-nvidia ; then
		prio_bumblebee=125
	fi

	normal=
	cudaonly=
	bumblebee=

	if echo "$libGL_nvidia_enabler $xorg_enabler" | grep -q "slave" ; then
		normal=1
	elif echo "$cuda_enabler" | grep -q "slave" ; then
		cudaonly=1
	fi
	if echo "$libGL_nvidia_enabler" | grep -q "slave" ; then
		bumblebee=1
	fi

	if [ -n "$normal" ]; then
		# enable the alternative for X/GL/CUDA usage (nvidia_drv.so and/or libGL.so.1 available)
		update-alternatives --install /usr/lib/glx glx /usr/lib/nvidia $prio \
			$kernel_auto_slaves \
			$xorg_slaves $xorg_conf_slaves \
			$libGL_nvidia_slaves $libEGL_nvidia_slaves \
			$misc_slaves
	elif [ -n "$cudaonly" ]; then
		# enable the alternative for headless CUDA setups (without X and GL)
		update-alternatives --install /usr/lib/glx glx /usr/lib/nvidia $prio \
			$kernel_auto_slaves \
			$libGL_mesa_slaves $libEGL_mesa_slaves \
			$misc_slaves
	fi
	if [ -n "$bumblebee" ]; then
		# enable the alternative for GL usage via bumblebee (NVIDIA's libGL.so.1 available)
		update-alternatives --install /usr/lib/glx glx /usr/lib/nvidia/bumblebee $prio_bumblebee \
			$kernel_manual_slaves \
			$libGL_mesa_slaves $libEGL_mesa_slaves \
			$misc_slaves
	else
		update-alternatives --remove glx /usr/lib/nvidia/bumblebee
	fi
	if [ -z "$normal" ] && [ -z "$cudaonly" ]; then
		update-alternatives --remove glx /usr/lib/nvidia
	fi

	dpkg-trigger --no-await ldconfig

	# trigger rebuilding the initrd to (de-)activate the nouveau blacklist
	dpkg-trigger --no-await update-initramfs

	# restart bumblebee to make it reload kernel module and libglx
	dpkg-trigger --no-await restart-bumblebeed
}

if [ "$1" = "triggered" ]; then

	case " $2 " in
		*" register-glx-alternative-nvidia--pong "*)
			setup_alternatives
			;;
		*)
			dpkg-trigger --no-await register-glx-alternative-nvidia--ping
			;;
	esac

fi

if [ "$1" = "configure" ]; then

	dpkg-trigger register-glx-alternative-nvidia

fi


#DEBHELPER#
